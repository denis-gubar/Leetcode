class Solution {
public:
	int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
		int N = graph.size();
		vector<vector<int>> connectivity(N);
		for (int i = 0; i < N; ++i)
			for (int j = i + 1; j < N; ++j)
				if (graph[i][j])
				{
					connectivity[i].push_back(j);
					connectivity[j].push_back(i);
				}
		vector<int> results(N, N + 100);
		for (int I : initial)
		{
			vector<int> visited(N);
			queue<int> Q;
			for (int v : initial)
				if (v != I)
				{
					visited[v] = 1;
					Q.push(v);
				}
			while (!Q.empty())
			{
				int v = Q.front(); Q.pop();
				for (int u : connectivity[v])
					if (!visited[u])
					{
						visited[u] = 1;
						Q.push(u);
					}
			}
			results[I] = accumulate(visited.begin(), visited.end(), 0);
		}
		return min_element(results.begin(), results.end()) - results.begin();
	}
};